(define rand
	(let ((x 6))
		(lambda ()
			(set! x (rand-update x))
			x)))

(define (estimate-pi trials)
	(sqrt (/ 6 (monte-carlo trials cesaro-test))))
(define (cesaro-test)
	(= (gcd (rand) (rand)) 1))
(define (monte-carlo trials experiment)
	(define (iter trials-remaining trials-passed)
		(cond ((= trials-remaining 0)
			   (/ trials-passed trials))
			  ((experiment)
			   (iter (- trials-remaining 1) (+ trials-passed 1)))
			  (else
			   (iter (- trials-remaining 1) trials-passed))))
	(iter trials 0))
(define (random-in-range low high)
	(let ((range (- high low)))
		(+ low (random range))))
(define (estimate-integral pred x1 x2 y1 y2 numOfTrials)
	(define (int-exp pred)
		(lambda ()
			(pred (random-in-range x1 x2) (random-in-range y1 y2))))
	(define squarea
		(* (abs (- x2 x1)) (abs (- y2 y1))))
	(* (monte-carlo numOfTrials (int-exp inUnit?))
	   (squarea)))
(define (inUnit? x y)
	(<= (+ (* x x) (* y y)) 1))
(define (unit TrialsToTest)
	(estimate-integral inUnit? -2.0 2.0 -2.0 2.0 TrialsToTest))
