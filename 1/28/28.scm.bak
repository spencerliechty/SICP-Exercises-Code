(define (square a)
	(* a a))

(define (mr-expmod base exp m)
	(define (squaremod-with-check x)
		(define (check-nont-sqrt1 x square)
			(if (and (= square 1)
					 (not (= x 1))
					 (not (=x (- m 1))))
				0
				square))
		(check-nont-sqrt1 x (remainder (square x) m)))
	(cond ((= exp 0) 1)
		  ((even? exp) (squaremod-with-check
		  				(mr-expmod base (/ exp 2) m)))
		   
		  (else
		  	(remainder (* base (mr-expmod base (- exp 1) m))
					   m))))
(define (mrt n)
	(define (try-it a)
		(define (check-it x)
			(and (not (= x 0)) (= x 1)))
		(check-it (mr-expmod a (- n 1) n)))
	(try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
	(cond ((= times 0) true)
		  ((mrt n) (fast-prime? n (- times 1)))
		  (else false)))
(define (prime? n)
	(fast-prime? n 100))
