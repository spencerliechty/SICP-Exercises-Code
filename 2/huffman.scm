(load "sets")
(define (make-leaf symbol weight)
	(list 'leaf symbol weight))
(define (leaf? object)
	(eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (make-code-tree left right)
	(list left
		  right
		  (append (symbols left) (symbols right))
		  (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
	(if (leaf? tree)
		(list (symbol-leaf tree))
		(caddr tree)))
(define (weight tree)
	(if (leaf? tree)
		(weight-leaf tree)
		(cadddr tree)))
(define (decode bits tree)
	(define (decode-1 bits current-branch)
		(if (null? bits)
			'()
			(let ((next-branch
				    (choose-branch (car bits) current-branch)))
				(if (leaf? next-branch)
					(cons (symbol-leaf next-branch)
						  (decode-1 (cdr bits) tree))
					(decode-1 (cdr bits) next-branch)))))
	(decode-1 bits tree))
(define (choose-branch bit branch)
	(cond ((= bit 0) (left-branch branch))
		  ((= bit 1) (right-branch branch))
		  (else (error "Bad Bit -- CHOOSE-BRANCH" bit))))
(define (adjoin-set x set)
	(cond ((null? set) (list x))
		  ((< (weight x) (weight (car set))) (cons x set))
		  (else (cons (car set)
		  			  (adjoin-set x (cdr set))))))
(define (make-leaf-set pairs)
	(if (null? pairs)
		'()
		(let ((pair (car pairs)))
		  (adjoin-set (make-leaf (car pair)
		  						 (cadr pair))
					  (make-leaf-set (cdr pairs))))))
(define sample-tree
	(make-code-tree (make-leaf 'A 4)
					(make-code-tree
						(make-leaf 'B 2)
						(make-code-tree (make-leaf 'D 1)
									   (make-leaf 'C 1)))))
(define sample-msg '(0 1 1 0 0 1 0 1 0 1 1 1 0))
(define (encode message tree)
	(if (null? message)
		'()
		(append (encode-symbol (car message) tree)
				(encode (cdr message) tree))))
(define (encode-symbol symbol tree)
	(define (get-symbol branch)
			(cond ((leaf? branch) '())
   				  ((element-of-set? symbol 
				  					(symbols (left-branch branch)))
				  	 (cons 0 (get-symbol (left-branch branch))))

				  ((element-of-set? symbol
				  					(symbols (right-branch branch)))
				  	 (cons 1 (get-symbol (right-branch branch))))))
	(if (element-of-set? symbol (symbols tree))
		(get-symbol tree)
		(error "Encode Symbol - Symbol Not in Library")))
(define (generate-huffman-tree pairs)
	(successive-merge (reverse (make-leaf-set pairs))))

(define (successive-merge leaf-set)
	(if (null? (cddr leaf-set))
		(make-code-tree (car leaf-set)
					    (cadr leaf-set))
		(make-code-tree (car leaf-set)
		  		        (successive-merge (cdr leaf-set)))))
		  
