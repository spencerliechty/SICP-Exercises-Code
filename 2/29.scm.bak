(define (make-mobile left right)
	(list left right))
(define (make-branch len struct)
	(list len struct))
(define (left-branch mob)
	(car mob))
(define (right-branch mob)
	(car (cdr mob)))
(define (branch-len branch)
	(car branch))
(define (branch-struct branch)
	(car (cdr branch)))

(define emob (make-mobile (make-branch 1 2) (make-branch 3 4)))
(define mob (make-mobile (make-branch 1 (make-mobile (make-branch 8 3)
(make-branch 6 9))) (make-branch 5 3)))
(define level-1-mobile (make-mobile (make-branch 2 1)
									(make-branch 1 2)))
(define level-2-mobile (make-mobile (make-branch 3 level-1-mobile)
									(make-branch 9 1)))
(define (total-weight mob)
	(cond ((not (pair? (branch-struct mob))) (branch-struct mob))
		  (else (+ (total-weight (left-branch mob))
			   	   (total-weight (right-branch mob)))))
		)
;Will return 0 for mobs, 1 for weights
(define (mobOrWt branch)
	(let ((bs (branch-struct branch)))
		(if (pair? bs)
			0
			bs)))
(define (wt mob)
	(+ (let ((leftBranchVal (mobOrWt (left-branch mob))))
			(if (= leftBranchVal 0)
				(wt (branch-struct (left-branch mob)))
				leftBranchVal))
	   (let ((rtBranchVal (mobOrWt (right-branch mob))))
	   		(if (= rtBranchval 0)
				(wt (branch-struct (right-branch mob)))
				rtBranchVal))))
;
;


(define (branchWt branch)
	(let ((bs (branch-struct branch)))
		(if (pair? bs)
			(totalWt bs)
			bs)))

(define (totalWt mob)
	(+ (branchWt (left-branch mob))
	   (branchWt (right-branch mob))))

(define (mobBal mob)
	(if (= (* (branch-len (left-branch mob)) (branchWt (left-branch mob)))
		   (* (branch-len (right-branch mob)) (branchWt (right-branch mob))))
		(and (if (pair? (branch-struct (left-branch mob)))
				  (mobBal (branch-struct (left-branch mob)))
			  	  #t)
			  (if (pair? (branch-struct (right-branch mob)))
			      (mobBal (branch-struct (right-branch mob)))
				  #t))
		#f))


